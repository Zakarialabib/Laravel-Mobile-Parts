<?php

declare(strict_types=1);

namespace [namespace];

use App\Http\Livewire\WithSorting;
use App\Traits\Datatable;
use Illuminate\Support\Facades\Gate;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Livewire\Component;
use Livewire\WithPagination;
use Illuminate\Contracts\View\View;

class [class] extends Component
{
    use WithPagination;
    use WithSorting;
    use LivewireAlert;
    use Datatable;

    /** @var mixed */
    public $model = Model::class;

    public $collections;

    /** @var string[] */
    public $listeners = ['createModal', 'editModal'];

    public $createModal = false;

    public $editModal = false;

    public array $listsForFields = [];

    /** @var string[][] */
    protected $queryString = [
        'search' => [
            'except' => '',
        ],
        'sortBy' => [
            'except' => 'id',
        ],
        'sortDirection' => [
            'except' => 'desc',
        ],
    ];

    protected function rules(): array
    {
        return [
         //
        ];
    }

    public function mount(): void
    {
        $this->sortBy = 'id';
        $this->sortDirection = 'desc';
        $this->perPage = 100;
        $this->paginationOptions = config('project.pagination.options');
        $this->orderable = (new $this->model())->orderable;
    }

    public function render(): View
    {
        $query = $this->model::advancedFilter([
            's'               => $this->search ?: null,
            'order_column'    => $this->sortBy,
            'order_direction' => $this->sortDirection,
        ]);

        $collections = $query->paginate($this->perPage);

        return view('[view]', compact('collections'));
    }

    public function createModal()
    {
        abort_if(Gate::denies(''), 403);

        $this->resetErrorBag();

        $this->resetValidation();

        $this->createModal = true;
    }

    public function create(): void
    {
        $this->validate();

        $this->createModal = false;

        $this->alert('success', __('created successfully.'));
    }

    public function editModal()
    {
        abort_if(Gate::denies(''), 403);

        $this->resetErrorBag();

        $this->resetValidation();

        $this->editModal = true;
    }

    public function update(): void
    {
        $this->validate();

        $this->editModal = false;

        $this->alert('success', __('updated successfully.'));
    }

    public function deleteSelected()
    {
        abort_if(Gate::denies(''), 403);

        $this->model::whereIn('id', $this->selected)->delete();

        $this->resetSelected();
    }

    public function delete(Model $model)
    {
        abort_if(Gate::denies(''), 403);

        $model->delete();
    }

}
